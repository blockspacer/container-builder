#!/bin/bash

export OS_CACERT=`pwd`/OpenStack.cer
echo "using OS_CACERT="$OS_CACERT

# OpenStack credentials
source ./openrc.sh

# Destroy any existing builder if one exists
./TearDownQueue --no_source

# Get script directory
SCRIPT_DIR=$(dirname $0)

# General VM settings
BOOTIMG="CADES_Ubuntu16.04_v20170804_1"
ZONE="nova"
FLAVOR="m1.medium"
NIC=$(openstack network show -c id --format value or_provider_general_extnetwork1)

# Create Keys for cades user
KEY="ContainerBuilderKey"
KEY_FILE="${SCRIPT_DIR}/${KEY}"

# Create a new keypair named ContainerBuilderKey
openstack keypair create ${KEY} > ${KEY_FILE}
chmod 600 ${KEY_FILE}

echo "This make take some time."

# Startup new VM
VM_UUID=$(openstack server create                            \
    --image "${BOOTIMG}"                                     \
    --flavor "${FLAVOR}"                                     \
    --availability-zone "${ZONE}"                            \
    --nic net-id="${NIC}"                                    \
    --file /home/cades/openrc.sh=$(pwd)/openrc.sh            \
    --key-name "${KEY}"                                      \
    --user-data ${SCRIPT_DIR}/ProvisionQueue.sh              \
    --wait                                                   \
    "BuilderQueue" | grep "\<id\>" | awk '{print $4}');


# Spinner...
function spin_me_right_round() {
  declare -a spin=("-" "\\" "|" "/"
                   "-" "\\" "|" "/"
                   "-" "\\" "|" "/")
  for i in "${spin[@]}"
  do
        echo -ne "\b$i"
        sleep 0.5
  done
}

# Even though the server is created we need to wait for the cloud-init scripts to finish running before creating a snapshot
# Wait for SSH to be usable.
until openstack console log show ${VM_UUID} | grep "running 'modules:final'" > /dev/null 2>&1; do
  spin_me_right_round
done

# Get external IP address
VM_IP=$(openstack server show -c addresses --format value ${VM_UUID} | sed -e "s/^or_provider_general_extnetwork1=//")
echo "Started ${VM_UUID} with external IP ${VM_IP} using ${KEY_FILE}"