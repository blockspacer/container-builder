#!/bin/bash

export OS_CACERT=`pwd`/OpenStack.cer
echo "using OS_CACERT="${OS_CACERT}

# OpenStack credentials
source ./openrc.sh

# Destroy any existing builder if one exists
./TearDownQueue --no_source

# Get script directory
SCRIPT_DIR=$(pwd)

# General VM settings
BOOTIMG="CADES_Ubuntu16.04_v20170804_1"
ZONE="nova"
FLAVOR="m1.medium"
NIC=$(openstack network show -c id --format value or_provider_general_extnetwork1)

# Create ContainerBuilder security group
openstack security group create container_builder --description "Allow ContainerBuilder communication"           &> /dev/null
openstack security group rule create container_builder --protocol tcp --dst-port 22:22 --remote-ip 0.0.0.0/0     &> /dev/null
openstack security group rule create container_builder --protocol tcp --dst-port 8080:8080 --remote-ip 0.0.0.0/0 &> /dev/null

# Create Keys for cades user
KEY="ContainerBuilderKey"
KEY_FILE="${SCRIPT_DIR}/${KEY}"

# Create a new keypair named ContainerBuilderKey
openstack keypair create ${KEY} > ${KEY_FILE}
chmod 600 ${KEY_FILE}

echo "This make take some time."

# Startup new VM
VM_UUID=$(openstack server create                                       \
    --image "${BOOTIMG}"                                                \
    --flavor "${FLAVOR}"                                                \
    --availability-zone "${ZONE}"                                       \
    --nic net-id="${NIC}"                                               \
    --key-name "${KEY}"                                                 \
    --user-data ${SCRIPT_DIR}/ProvisionQueue                            \
    --wait                                                              \
    -c id                                                               \
    --security-group container_builder                                  \
    -f value                                                            \
    "BuilderQueue");

# Spinner...
function spin_me_right_round() {
  declare -a spin=("-" "\\" "|" "/"
                   "-" "\\" "|" "/"
                   "-" "\\" "|" "/")
  for i in "${spin[@]}"
  do
        echo -ne "\b$i"
        sleep 0.5
  done
}

# Even though the server is created we need to wait for the cloud-init scripts to finish running before creating a snapshot
# Wait for SSH to be usable.
until openstack console log show ${VM_UUID} | grep "Reached target Cloud-init target" > /dev/null 2>&1; do
  spin_me_right_round
done
echo -ne "\b"

VM_IP=$(openstack server show -c addresses --format value ${VM_UUID} | sed -e "s/^or_provider_general_extnetwork1=//")

# Copy files to VM and then move to correct directory
scp -o StrictHostKeyChecking=no -i ./ContainerBuilderKey ${SCRIPT_DIR}/openrc.sh cades@${VM_IP}:/home/cades/openrc.sh
scp -o StrictHostKeyChecking=no -i ./ContainerBuilderKey ${SCRIPT_DIR}/RequestCreateBuilder cades@${VM_IP}:/home/cades/RequestCreateBuilder
scp -o StrictHostKeyChecking=no -i ./ContainerBuilderKey ${SCRIPT_DIR}/DestroyBuilder cades@${VM_IP}:/home/cades/DestroyBuilder

ssh -o StrictHostKeyChecking=no -i ./ContainerBuilderKey cades@${VM_IP} 'sudo mv /home/cades/openrc.sh /home/queue/openrc.sh'
ssh -o StrictHostKeyChecking=no -i ./ContainerBuilderKey cades@${VM_IP} 'sudo mv /home/cades/RequestCreateBuilder /home/queue/RequestCreateBuilder'
ssh -o StrictHostKeyChecking=no -i ./ContainerBuilderKey cades@${VM_IP} 'sudo mv /home/cades/DestroyBuilder /home/queue/DestroyBuilder'

# Reboot to ensure Queue service, added in provisioning, is started
openstack server reboot --wait ${VM_UUID}

echo "Started ${VM_UUID} with external IP ${VM_IP} using ${KEY_FILE}"