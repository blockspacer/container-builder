#!/bin/bash

export OS_CACERT=`pwd`/OpenStack.cer
echo "using OS_CACERT="${OS_CACERT}

# OpenStack credentials will be sourced by the gitlab runners
#source ./openrc.sh

# Destroy any existing builder if one exists
./TearDownQueue --no_source
./DestroyBuilderImage --no_source

# Get script directory
SCRIPT_DIR=$(dirname $0)

# Create ContainerBuilder security group allowing tcp access to port 8080 and 22
openstack security group create container_builder --description "Allow ContainerBuilder communication"           &> /dev/null
openstack security group rule create container_builder --protocol tcp --dst-port 22:22 --remote-ip 0.0.0.0/0     &> /dev/null
openstack security group rule create container_builder --protocol tcp --dst-port 8080:8080 --remote-ip 0.0.0.0/0 &> /dev/null

# Create Keys for cades user
KEY="ContainerBuilderKey"
KEY_FILE="${SCRIPT_DIR}/../artifacts/${KEY}"

# Create a new keypair named ContainerBuilderKey
openstack keypair create ${KEY} > ${KEY_FILE}
chmod 600 ${KEY_FILE}

# General VM settings
BOOTIMG="CADES_Ubuntu16.04_v20170804_1"
ZONE="nova"
FLAVOR="m1.large"
NIC=$(openstack network show -c id --format value or_provider_general_extnetwork1)
KEY="ContainerBuilderKey"
echo "This make take some time."

# Startup new VM
VM_UUID=$(openstack server create                        \
    --image "${BOOTIMG}"                                 \
    --flavor "${FLAVOR}"                                 \
    --availability-zone "${ZONE}"                        \
    --nic net-id="${NIC}"                                \
    --key-name "${KEY}"                                  \
    --wait                                               \
    -c id                                                \
    -f value                                             \
    "BuilderMaster");

# Spinner...
function spin_me_right_round() {
  declare -a spin=("-" "\\" "|" "/"
                   "-" "\\" "|" "/"
                   "-" "\\" "|" "/")
  for i in "${spin[@]}"
  do
        echo -ne "\b$i"
        sleep 0.5
  done
}

VM_IP=$(openstack server show -c addresses --format value ${VM_UUID} | sed -e "s/^or_provider_general_extnetwork1=//")

echo "Waiting for SSH to come up"
while [ $? -ne 0 ]; do
    ssh -o StrictHostKeyChecking=no -i ${KEY_FILE} cades@${VM_IP} || (sleep 1;false)
done

echo "Provisioning the builder"
ssh -o StrictHostKeyChecking=no -i ${KEY_FILE} cades@${VM_IP} 'bash -s' < ${SCRIPT_DIR}/ProvisionQueue

####
# Handle building base containers as we don't have a registry setup yet
####

echo "Copy over proprietary software that will be available in Base containers"
echo "Copying IBM Spectrum RPMs to build host"
ssh -o StrictHostKeyChecking=no -i ${KEY_FILE} cades@${VM_IP} 'sudo mkdir -p /IBM'
ssh -o StrictHostKeyChecking=no -i ${KEY_FILE} cades@${VM_IP} 'sudo chmod 750 /IBM'
scp -o StrictHostKeyChecking=no -i ${KEY_FILE} cades@${VM_IP} /sw/summitdev/spectrum_mpi/10.1.0.4-20170915/rpms/* /IBM

echo "Build Titan and Summit base containers inside of builder image"
ssh -o StrictHostKeyChecking=no -i ${KEY_FILE} cades@${VM_IP} 'sudo /ContainerBuilder/Scripts/CreateBaseContainers'

echo "Reboot the server to ensure it's in a clean state before creating the snapshot"
openstack server reboot --wait ${VM_UUID}

echo "Shutting down server"
openstack server stop ${VM_UUID}
until openstack server list --status SHUTOFF | grep ${VM_UUID} > /dev/null 2>&1; do
  spin_me_right_round
done
echo -ne "\b"

echo "Creating builder snapshot image"
openstack server image create --wait --name BuilderImage ${VM_UUID} &> /dev/null

echo "Deleting builder master instance"
openstack server delete --wait BuilderMaster

echo "Finished creating BuilderImage"