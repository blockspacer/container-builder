#!/bin/bash

export OS_CACERT=`pwd`/OpenStack.cer
echo "using OS_CACERT="${OS_CACERT}

# OpenStack credentials
source ./openrc.sh

# Destroy any existing builder if one exists
./DestroyBuilderImage --no_source

# Get script directory
SCRIPT_DIR=$(dirname $0)

# General VM settings
BOOTIMG="CADES_Ubuntu16.04_v20170804_1"
ZONE="nova"
FLAVOR="m1.medium"
NIC=$(openstack network show -c id --format value or_provider_general_extnetwork1)
KEY="ContainerBuilderKey"
echo "This make take some time."

# Startup new VM
VM_UUID=$(openstack server create                        \
    --image "${BOOTIMG}"                                 \
    --flavor "${FLAVOR}"                                 \
    --availability-zone "${ZONE}"                        \
    --nic net-id="${NIC}"                                \
    --key-name "${KEY}"                                  \
    --user-data ProvisionBuilder                         \
    --wait                                               \
    "BuilderMaster" | grep "\<id\>" | awk '{print $4}');

# Spinner...
function spin_me_right_round() {
  declare -a spin=("-" "\\" "|" "/"
                   "-" "\\" "|" "/"
                   "-" "\\" "|" "/")
  for i in "${spin[@]}"
  do
        echo -ne "\b$i"
        sleep 0.5
  done
}

# Even though the server is created we need to wait for the cloud-init scripts to finish running before creating a snapshot
# Wait for SSH to be usable.
until openstack console log show ${VM_UUID} | grep "running 'modules:final'" > /dev/null 2>&1; do
  spin_me_right_round
done

echo "Creating builder snapshot image"
openstack server stop --wait ${VM_UUID}
openstack server image create --name BuilderImage --wait ${VM_UUID}

echo "Deleting builder master instance"
openstack server delete --wait BuilderMaster

echo "Finished creating BuilderImage"