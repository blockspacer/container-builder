#!/bin/bash

# To get the the nova command lines tool "sudo pip install python-novaclient"

export OS_CACERT=`pwd`/OpenStack.cer
echo "using OS_CACERT="$OS_CACERT

# OpenStack credentials
source ./openrc.sh

QUEUE_HOSTNAME=`cat ResourceQueueIP`
QUEUE_PORT="8080"

# Destroy any existing builder if one exists
./DestroyBuilderImage --no_source

# Get script directory
SCRIPT_DIR=$(dirname $0)

# General VM settings
BOOTIMG="CADES_Ubuntu16.04_v20170804_1"
ZONE="nova"
FLAVOR="m1.medium"
NIC="or_provider_general_extnetwork1"
KEY="ContainerBuilderKey"

# Insert ResourceQueue information into our provisioning script
cp ${SCRIPT_DIR}/ProvisionBuilder.sh CustomProvisionBuilder.sh
sed -i "2i2 export QUEUE_HOSTNAME=${QUEUE_HOSTNAME}" ./CustomProvisionBuilder.sh
sed -i "3i3 export QUEUE_PORT=${QUEUE_PORT}" ./CustomProvisionBuilder.sh

echo "This make take some time."

# Startup new VM
VM_UUID=$(nova boot                                          \
    --image "${BOOTIMG}"                                     \
    --flavor "${FLAVOR}"                                     \
    --availability-zone "${ZONE}"                            \
    --nic net-name="${NIC}"                                  \
    --key-name "${KEY}"                                      \
    --user-data CustomProvisionBuilder.sh                    \
    "BuilderMaster" | awk '/id/ {print $4}' | head -n 1);

# Spinner...
function spin_me_right_round() {
  declare -a spin=("-" "\\" "|" "/"
                   "-" "\\" "|" "/"
                   "-" "\\" "|" "/")
  for i in "${spin[@]}"
  do
        echo -ne "\b$i"
        sleep 0.5
  done
}

# Wait for VM to become active.
until [[ "$(nova show ${VM_UUID} | awk '/status/ {print $4}')" == "ACTIVE" ]]; do
  spin_me_right_round
done

# Wait for SSH to be usable.
until nova console-log ${VM_UUID} | grep "running 'modules:final'" > /dev/null 2>&1; do
  spin_me_right_round
done

# Get external IP address
VM_IP=`nova show ${VM_UUID} | grep or_provider_general_extnetwork1 | awk '{print $5}'`

# Remove custom provisioning script
rm ./CustomProvisionBuilder.sh

echo "Creating builder snapshot image"
nova stop ${VM_UUID}

# This is cheap but should work, image-create will only work if the image is shutdown
sleep 120

nova image-create --poll ${VM_UUID} "BuilderImage"

echo "Deleting builder master instance"
nova delete BuilderMaster

echo "Finished creating BuilderImage"